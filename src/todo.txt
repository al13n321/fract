Critical features:
- Asynchronous timewarp.
- Saving everything to a file
- Runtime reloading and rebuilding of everything
- Cubemap

Important features:
- Dynamically changing resolution based on preformance
- Collision detection (how?)

Plan:
- Fix retina issue
- Mandelbulb
- Asynchronous timewarp.
- Saving everything to file (shaders, camera)
	Should be able to save current view as a camera, so it can be pasted here later to restore view.
  Or save the entire state, with camera inlined.
  Or get everything necessary to reproduce current view (code, configs) in a separate directory,
    i.e. export current state as an isolated editable project.
- Loading uniforms and additional preprocessor definitions from config
- Preprocessor
- Lookup cube, precalcing synchronously, manually
- Loading uniforms from file at runtime
- Lookup cube rendering in background thread,
  automatically triggered by timeouts

Wishlist, to keep in mind:
- Fix loading shaders twice; don't know how to avoid race yet
- Loading values for uniforms from separate file
  (erm, I don't remember why I wanted that; just from config should be enough?)
- Progressive enhancement for cubemap
- An space-style camera with no up and down
- Environment maps
- Fix mouse movement initialization with low FPS
- Background precalc progress indication
- Rewinding movements
	+ Saving precalc checkpoints for faster re-rendering?

Notes:
- Try over-relaxation.
- Limit quality degradation when using cubemap:
  use pixel size when tracing through cubemap;
  ignore cubemap texels that are too big on screen, including side hits
- Can use multiple OpenGL contexts for background rendering.
- Cubemap face resolution is not image resolution; it depends on image FOV.
  Also, better make it even more for better quality

Random ideas:
- Averaging iteration count from within DE across raymarching steps;
  maybe will get some foggy appearance; or glitchy